<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.1.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

	<!-- 上下文对象AppContext的缓存提供者，框架提供多种方式可根据具体情况选择其一  -->
	<!-- 使用MemCache提供缓存， 有多种实例化方式：
		* 参数1设置多台MemCached服务器IP端口号（索引0为Master服务器，其余为Slave服务器），参数2设置是否提醒错误信息；
		* 参数1设置多台MemCached服务器IP端口号，参数2设置其中一台索引为Master服务器（其余为Slave服务器），参数3设置是否提醒错误信息；
		* 参数1设置一台Master服务器IP端口号，参数2设置多台Slave服务器IP端口号，参数3设置是否提醒错误信息 -->
	<!-- <bean id="cacheProvider" class="com.dcjet.apollo.framework.cache.MemCacheProvider">
		<constructor-arg index="0">
			<array>
				<value>127.0.0.1:11210</value>
			</array>
		</constructor-arg>
		<constructor-arg index="1" value="true" />
	</bean> -->
	<!-- 使用EhCache提供缓存，参数1为EhCache配置的Cache Name，参数2设置是否提醒错误信息 -->
	<bean id="cacheProvider" class="com.dcjet.apollo.framework.cache.EhCacheProvider">
		<constructor-arg index="0" value="pubcache" />
		<constructor-arg index="1" value="true" />
	</bean>
	
	<!-- 提醒服务提供者，一般用于邮件提醒异常信息 -->
	 
	<bean id="remindProvider"
		class="com.dcjet.apollo.framework.web.mail.MailServiceRemindProvider" /> 
	
	<!-- 上下文对象AppContext的变量提供者 -->
	<bean id="variableProvider"
		class="com.dcjet.apollo.framework.web.variable.HttpSessionVariableProvider" />
	
	<!-- 上下文对象AppContext的公共代码库提供者 -->
	<bean id="publicCodeProvider"
		class="com.dcjet.apollo.framework.publicCode.PublicCodeProvider" />
	
	<!-- 动态数据源的配置提供者，默认根据所属企业编码+业务系统标识从参数库读取 -->
	<bean id="dataSourceProvider" class="com.dcjet.${ddata.solution.solutionName}.base.DataSourceProvider" />
	
	<!-- 多数据源配置 -->
	<bean id="dynamicDataSource" class="com.dcjet.apollo.framework.jdbc.DynamicDataSource">
        <property name="targetDataSources">
        	<map key-type="java.lang.String" />
        </property>
        <!-- 设置默认的dataSource -->
        <property name="defaultTargetDataSource" ref="dataSource" />
    </bean>
</beans>